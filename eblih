#!/usr/bin/python2.7

import os
import sys
import getopt
import shutil
import signal
import getpass
import hashlib
import json
from srcs import BLIH

def	setcolor(color = "", colors=True):
	if colors == True:
		if color == "red":
			return '\033[1;31m'
		elif color == "blue":
			return '\033[1;34m'
		elif color == "green":
			return '\033[1;32m'
		else:
			return '\033[0m'
	else:
		return ""

class	Eblih(object):

	def	__init__(self, user, token, color=True, folder=os.getenv('PWD'), tmp="/tmp/eblih", baseurl="https://blih.epitech.eu/", verbose=False, groups="./groups.json", graphicMode=False):
		super(Eblih, self).__init__()
		self._user = user
		self._token = token
		self._color = color
		self._folder = folder
		self._tmp = tmp
		self._baseurl = baseurl
		self._verbose = verbose
		self._groups = groups
		self._graphicMode = graphicMode
		signal.signal(signal.SIGINT, self.signal_handler)

	def	signal_handler(self, signal, frame):
		print(setcolor("red") + 'Quit...' + setcolor())
		shutil.rmtree(self._tmp, ignore_errors=True)
		sys.exit(1)

	def	usage(exit=1):
		print """Usage: eblih [options] command ...

Global Options :
	-u user | --user=user		-- Run as user
	-f folder | --folder=folder	-- Execute in specific folder
	-v | --verbose			-- Verbose
	-c | --nocolor			-- Remove the colors
	-b url | --baseurl=url		-- Base URL for BLIH
	-t token | --token token	-- Specify token in the cmdline
	-T folder | --tmp folder	-- Set folder as tmp
	-g file | --groups file		-- File for groups informations
	-V | --version			-- Version

Commands :
	repository			-- Repository management
	group				-- Group management
	sshkey				-- SSH keys management
	config				-- Modify blihtek configuration
	NO_COMMAND			-- GUI Mode

Environment variables :
	EPITECH_LOGIN			-- Your login
	EPITECH_TOKEN			-- Your UNIX password in SHA512
	EPITECH_FOLDER			-- Your work folder"""
		sys.exit(exit)

	usage = staticmethod(usage)

	def	version(exit=1):
		print(setcolor("blue") + "VERSION" + setcolor())
		sys.exit(exit)

	version = staticmethod(version)

	def	getGroupsConfig(self):
		if not os.path.exists(self._groups):
			self.saveGroupsConfig({"groups":[]})
		with open(self._groups) as data:
			config = json.load(data)
		return config

	def	saveGroupsConfig(self, data):
		with open(self._groups, "w") as dataFile:
			dataFile.write(json.dumps(data))

	def	execute(self, args):

		def	printMessage(message):
			print(message["data"]["message"])

		def	repository(args):

			def	printList(data):
				repositories = []
				for name in data["data"]["repositories"]:
					if len(name):
						repositories.append(name)
				repositories.sort(key=lambda x:x.lower())
				for name in repositories:
					if len(args) == 2 and args[1] not in name:
						continue
					print(name)

			def	printACL(data):
				users = []
				for name in data["data"]:
					users.append(name)
				users.sort(key=lambda x:x.lower())
				for name in users:
					print("{0}:\t{1}".format(name, data["data"][name]))

			def	setGroupACL(args):
				config = self.getGroupsConfig()
				for group in config["groups"]:
					if group["name"] != args[1]:
						continue
					for user in group["users"]:
						result = api.setACL([args[0], user["name"], args[2] if len(args) == 3 else ""])
						result["data"]["message"] += " for {0}".format(user["name"])
						printMessage(result)
					return
				raise Exception("Group not found")

			api = BLIH.Repository(self._user, self._token)
			actions = {"create": api.create,
						"list": api.list,
						"info": api.info,
						"getacl": api.getACL,
						"setacl": api.setACL,
						"setgacl": setGroupACL,
						"delete": api.delete}
			result = actions[args[0]](args[1:])
			display = {"create": printMessage,
						"list": printList,
						"info": printMessage,
						"getacl": printACL,
						"setacl": printMessage,
						"setgacl": sys.exit,
						"delete": printMessage}
			display[args[0]](result)

		def	group(args):

			def	create(args):
				for group in config["groups"]:
					if group["name"] == args[0]:
						raise Exception("Group already exist")
				config["groups"].append({"name": args[0], "users": []})
				self.saveGroupsConfig(config)

			def	add(args):
				for group in config["groups"]:
					if group["name"] != args[0]:
						continue
					for user in group["users"]:
						if user["name"] == args[1]:
							user["acls"] = args[2]
							self.saveGroupsConfig(config)
							return
					group["users"].append({"name": args[1], "acls": args[2]})
					self.saveGroupsConfig(config)
					return
				raise Exception("Group not found")

			def	delete(args):
				for group in config["groups"]:
					if group["name"] != args[0]:
						continue
					if len(args) == 1:
						config["groups"].remove(group)
						self.saveGroupsConfig(config)
						return
					else:
						toRemove = []
						users = args[1:]
						for user in group["users"]:
							if user["name"] in users:
								toRemove.append(user)
								users.remove(user["name"])
						for user in users:
							print(user + " not found in group")
						for user in toRemove:
							group["users"].remove(user)
					self.saveGroupsConfig(config)
					return
				raise Exception("Group not found")

			def	show(args=None):
				for group in config["groups"]:
					if len(args) and group["name"] != args[0]:
						continue
					print(group["name"])
					for user in group["users"]:
						print("\t{0}: {1}".format(user["name"], user["acls"]))
					if len(args) and group["name"] == args[0]:
						return
				if len(args):
					raise Exception("Group not found")

			def	rename(args):
				for group in config["groups"]:
					if group["name"] != args[0]:
						continue
					group["name"] = args[1]
					self.saveGroupsConfig(config)
					return
				raise Exception("Group not found")

			config = self.getGroupsConfig()
			actions = {"create": create,
						"add": add,
						"delete": delete,
						"rename": rename,
						"list": show}
			actions[args[0]](args[1:])

		def	sshkey(args):

			def	printKeys(data):
				keys = []
				for key in data["data"]:
					keys.append(key)
				keys.sort(key=lambda x:x.lower())
				for key in keys:
					print("{0}\n{1}\n".format(key, data["data"][key]))

			api = BLIH.SSHKey(self._user, self._token)
			actions = {"upload": api.upload,
						"list": api.list,
						"delete": api.delete}
			result = actions[args[0]](args[1:])
			display = {"upload": printMessage,
						"list": printKeys,
						"delete": printMessage}
			display[args[0]](result)

		def	config(args):

			def	crypt(args):
				if sys.stdin.isatty():
					password = getpass.getpass("Your password :")
				else:
					password = sys.stdin.readline().rstrip()
				token = bytearray(hashlib.sha512(bytearray(password, 'utf8')).hexdigest(), 'utf8')
				print(token.decode("utf-8"))

			def	disp(args):

				def	show(var):
					print("{0}={1}".format(var, os.getenv(var)))

				var = ["EPITECH_LOGIN", "EPITECH_TOKEN", "EPITECH_FOLDER"]
				if len(args) == 1:
					if args[0] in var:
						show(args[0])
					else:
						raise Exception("Variable not found")
				else:
					for item in var:
						show(item)

			actions = {"crypt": crypt,
						"disp": disp}
			actions[args[0]](args[1:])

		def	help(args=None):
			self.usage(exit=0)

		if self._graphicMode:
			print("GUI")
			sys.exit(42)
		actions = {"repository": repository,
					"group": group,
					"sshkey": sshkey,
					"config": config,
					"help": help}
		try:
			actions[args[0]](args[1:])
		except Exception as e:
			print("Error with action")
			print(e)
			return e

if __name__ == '__main__':

	def	getEblih(args=None):
		folder = os.getenv('EPITECH_FOLDER') if (os.getenv('EPITECH_FOLDER') != None and os.getenv('EPITECH_FOLDER') != "") else os.getenv('PWD')
		try:
			opts, args = getopt.getopt(args, 'hf:cvu:b:t:V:T:g:', ['help', 'folder=', 'nocolor', 'verbose', 'user=', 'baseurl=', 'token=', 'version', "tmp=", "groups="])
		except getopt.GetoptError as e:
			print (e)
			Eblih.usage()
		guest = False
		user = None
		token = None
		colors = True
		tmp = "/tmp/eblih"
		baseurl = "https://blih.epitech.eu"
		groups = "srcs/groups.json"
		verbose = False
		graphicMode = False
		for flag, value in opts:
			if flag in ('-h', '--help'):
				Eblih.usage(exit=0)
			elif flag in ('-f', '--folder'):
				folder = value
			elif flag in ('-v', '--verbose'):
				verbose = True
			elif flag in ('-c', '--nocolor'):
				colors = False
			elif flag in ('-u', '--user'):
				guest = True
				user = value
			elif flag in ('-b', '--baseurl'):
				baseurl = value
			elif flag in ('-t', '--token'):
				token = bytearray(value, 'utf8')
			elif flag in ('-V', '--version'):
				Eblih.version()
			elif flag in ('-T', '--tmp'):
				tmp = value
			elif flag in ('-g', '--groups'):
				groups = value
			else:
				Eblih.usage()
		graphicMode = True if len(args) == 0 else False
		if user == None:
			if os.getenv("EPITECH_LOGIN") != None and len(os.getenv("EPITECH_LOGIN")):
				user = os.getenv("EPITECH_LOGIN")
			else:
				user = getpass.getuser()
		if (token == None or guest) and len(args) and args[0] not in ["config", "group"]:
			if os.getenv("EPITECH_TOKEN") != None and os.getenv("EPITECH_TOKEN") != "" and guest == False:
				token = bytearray(os.getenv("EPITECH_TOKEN"), 'utf8')
			else:
				if sys.stdin.isatty():
					password = getpass.getpass(setcolor("green") + 'Your password :' + setcolor())
				else:
					password = sys.stdin.readline().rstrip()
				token = bytearray(hashlib.sha512(bytearray(password, 'utf8')).hexdigest(), 'utf8')
		return Eblih(user, token, colors, folder, tmp, baseurl, verbose, groups, graphicMode), args

	eblih, args = getEblih(sys.argv[1:])
	eblih.execute(args)
